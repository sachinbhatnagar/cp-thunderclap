{"version":3,"sources":["js/actions.js","js/debounce.js","js/state.js","js/view.js","js/index.js"],"names":["getLocations","apiKey","key","cb","fetch","then","res","json","getWeather","loc","debounce","fn","delay","timer","args","clearTimeout","setTimeout","apply","fnArr","State","constructor","obj","data","Proxy","get","target","set","prop","value","forEach","call","state","registerViewHandler","push","resultsEl","document","querySelector","onloadTitle","currentBg","currentTemp","currentCondition","currentIcon","pressure","visibility","wind","humidityEl","forecast","setBg","temp","unhideUI","classList","remove","style","display","forecastTemplate","date","icon","localDate","Date","Intl","DateTimeFormat","format","replace","currentWeather","temp_c","condition","text","pressure_mb","vis_km","wind_kph","humidity","weather","current","innerText","setAttribute","forecastWeather","forecastday","content","map","day","innerHTML","join","API_KEY","search","locationsList","getLocs","addEventListener","evt","preventDefault","inputType","remappedLocations","name","region","result"],"mappings":"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","file":"js.3c69325f.js","sourceRoot":"../src","sourcesContent":["export function getLocations(apiKey, key, cb) {\n  return fetch(`https://api.weatherapi.com/v1/search.json?key=${apiKey}&q=${key}`)\n    .then((res) => res.json())\n    .then((res) => cb(res));\n}\n\nexport function getWeather(apiKey, loc) {\n  return fetch(`http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${loc}&days=5&aqi=no&alerts=no`).then((res) => res.json());\n}\n","export default function debounce(fn, delay = 500) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() => fn.apply(null, args), delay);\n  };\n}\n","const fnArr = [];\n\nexport default class State {\n  constructor(obj) {\n    this.data = new Proxy((obj = {}), {\n      get(target) {\n        return target;\n      },\n      set(obj, prop, value) {\n        obj[prop] = value;\n        fnArr.forEach((fn) => fn.call(null, obj));\n        return true;\n      },\n    });\n  }\n  get state() {\n    return this.data;\n  }\n  registerViewHandler(fn) {\n    fnArr.push(fn);\n  }\n}\n","const resultsEl = document.querySelector('#results');\nconst onloadTitle = document.querySelector('#onload-title');\nconst currentBg = document.querySelector('#current');\nconst currentTemp = document.querySelector('#temp');\nconst currentCondition = document.querySelector('#condition');\nconst currentIcon = document.querySelector('#current-icon > img');\nconst pressure = document.querySelector('#pressure');\nconst visibility = document.querySelector('#visibility');\nconst wind = document.querySelector('#wind');\nconst humidityEl = document.querySelector('#humidity');\nconst forecast = document.querySelector('#forecast');\n\nfunction setBg(temp) {\n  if (temp < 10) {\n    return 'cold';\n  } else if (temp > 10 && temp < 25) {\n    return 'warm';\n  } else {\n    return 'hot';\n  }\n}\n\nfunction unhideUI() {\n  resultsEl.classList.remove('hide');\n  onloadTitle.style.display = 'none';\n}\n\nfunction forecastTemplate(date, icon) {\n  const localDate = new Date(date);\n  const formattedDate = Intl.DateTimeFormat('en-IN').format(localDate);\n  return `<div>\n  <div class=\"date\">${formattedDate.replace(/\\//g, '-')}</div>\n  <div class=\"icon\"><img src=\"${icon}\" alt=\"\" /></div>\n</div>`;\n}\n\nexport function currentWeather(data) {\n  let {\n    temp_c,\n    condition: { text, icon },\n    pressure_mb,\n    vis_km,\n    wind_kph,\n    humidity,\n  } = data.weather.current;\n  currentTemp.innerText = `${temp_c}Â°c`;\n  currentCondition.innerText = text;\n  currentIcon.setAttribute('src', icon.replace('64x64', '128x128'));\n  pressure.innerText = `${pressure_mb}mb`;\n  visibility.innerText = `${vis_km}kms`;\n  wind.innerText = `${wind_kph}kph`;\n  humidityEl.innerText = `${humidity}%`;\n  currentBg.setAttribute('class', setBg(temp_c));\n  unhideUI();\n}\n\nexport function forecastWeather(data) {\n  let { forecastday } = data.weather.forecast;\n  let content = forecastday.map(\n    ({\n      date,\n      day: {\n        condition: { icon },\n      },\n    }) => forecastTemplate(date, icon.replace('64x64', '128x128'))\n  );\n\n  forecast.innerHTML = content.join('');\n}\n","// Write your code here...\nimport { getLocations, getWeather } from './actions';\nimport debounce from './debounce';\nimport State from './state';\nimport { currentWeather, forecastWeather } from './view';\n\nconst API_KEY = '1771e80ec84d432889d51008221603';\nconst search = document.querySelector('#search');\nconst locationsList = document.querySelector('#locations');\nconst getLocs = debounce(getLocations);\nlet { state, registerViewHandler } = new State();\n\nregisterViewHandler(currentWeather);\nregisterViewHandler(forecastWeather);\n\nsearch.addEventListener('input', (evt) => {\n  evt.preventDefault();\n\n  if (evt.inputType === 'insertText') {\n    getLocs(API_KEY, evt.target.value, (res) => {\n      let remappedLocations = res.map(({ name, region }) => `<option value=\"${name}, ${region}\">`).join('');\n      locationsList.innerHTML = remappedLocations;\n    });\n  } else if (evt.target.value !== '' && evt.inputType !== 'deleteContentBackward') {\n    getWeather(API_KEY, evt.target.value).then((result) => (state.weather = result));\n  }\n});\n"]}